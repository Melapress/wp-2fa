<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */
namespace WP2FA_Vendor\Twilio\Rest;

use WP2FA_Vendor\Twilio\Domain;
use WP2FA_Vendor\Twilio\Exceptions\TwilioException;
use WP2FA_Vendor\Twilio\Rest\Messaging\V1;
/**
 * @property \Twilio\Rest\Messaging\V1 $v1
 * @property \Twilio\Rest\Messaging\V1\BrandRegistrationList $brandRegistrations
 * @property \Twilio\Rest\Messaging\V1\DeactivationsList $deactivations
 * @property \Twilio\Rest\Messaging\V1\DomainCertsList $domainCerts
 * @property \Twilio\Rest\Messaging\V1\DomainConfigList $domainConfig
 * @property \Twilio\Rest\Messaging\V1\ExternalCampaignList $externalCampaign
 * @property \Twilio\Rest\Messaging\V1\ServiceList $services
 * @property \Twilio\Rest\Messaging\V1\TollfreeVerificationList $tollfreeVerifications
 * @property \Twilio\Rest\Messaging\V1\UsecaseList $usecases
 * @method \Twilio\Rest\Messaging\V1\BrandRegistrationContext brandRegistrations(string $sid)
 * @method \Twilio\Rest\Messaging\V1\DeactivationsContext deactivations()
 * @method \Twilio\Rest\Messaging\V1\DomainCertsContext domainCerts(string $domainSid)
 * @method \Twilio\Rest\Messaging\V1\DomainConfigContext domainConfig(string $domainSid)
 * @method \Twilio\Rest\Messaging\V1\ServiceContext services(string $sid)
 * @method \Twilio\Rest\Messaging\V1\TollfreeVerificationContext tollfreeVerifications(string $sid)
 */
class Messaging extends Domain
{
    protected $_v1;
    /**
     * Construct the Messaging Domain
     *
     * @param Client $client Client to communicate with Twilio
     */
    public function __construct(Client $client)
    {
        parent::__construct($client);
        $this->baseUrl = 'https://messaging.twilio.com';
    }
    /**
     * @return V1 Version v1 of messaging
     */
    protected function getV1() : V1
    {
        if (!$this->_v1) {
            $this->_v1 = new V1($this);
        }
        return $this->_v1;
    }
    /**
     * Magic getter to lazy load version
     *
     * @param string $name Version to return
     * @return \Twilio\Version The requested version
     * @throws TwilioException For unknown versions
     */
    public function __get(string $name)
    {
        $method = 'get' . \ucfirst($name);
        if (\method_exists($this, $method)) {
            return $this->{$method}();
        }
        throw new TwilioException('Unknown version ' . $name);
    }
    /**
     * Magic caller to get resource contexts
     *
     * @param string $name Resource to return
     * @param array $arguments Context parameters
     * @return \Twilio\InstanceContext The requested resource context
     * @throws TwilioException For unknown resource
     */
    public function __call(string $name, array $arguments)
    {
        $method = 'context' . \ucfirst($name);
        if (\method_exists($this, $method)) {
            return \call_user_func_array([$this, $method], $arguments);
        }
        throw new TwilioException('Unknown context ' . $name);
    }
    protected function getBrandRegistrations() : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\BrandRegistrationList
    {
        return $this->v1->brandRegistrations;
    }
    /**
     * @param string $sid The SID that identifies the resource to fetch
     */
    protected function contextBrandRegistrations(string $sid) : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\BrandRegistrationContext
    {
        return $this->v1->brandRegistrations($sid);
    }
    protected function getDeactivations() : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\DeactivationsList
    {
        return $this->v1->deactivations;
    }
    protected function contextDeactivations() : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\DeactivationsContext
    {
        return $this->v1->deactivations();
    }
    protected function getDomainCerts() : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\DomainCertsList
    {
        return $this->v1->domainCerts;
    }
    /**
     * @param string $domainSid Unique string used to identify the domain that this
     *                          certificate should be associated with.
     */
    protected function contextDomainCerts(string $domainSid) : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\DomainCertsContext
    {
        return $this->v1->domainCerts($domainSid);
    }
    protected function getDomainConfig() : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\DomainConfigList
    {
        return $this->v1->domainConfig;
    }
    /**
     * @param string $domainSid Unique string used to identify the domain that this
     *                          config should be associated with.
     */
    protected function contextDomainConfig(string $domainSid) : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\DomainConfigContext
    {
        return $this->v1->domainConfig($domainSid);
    }
    protected function getExternalCampaign() : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\ExternalCampaignList
    {
        return $this->v1->externalCampaign;
    }
    protected function getServices() : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\ServiceList
    {
        return $this->v1->services;
    }
    /**
     * @param string $sid The SID that identifies the resource to fetch
     */
    protected function contextServices(string $sid) : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\ServiceContext
    {
        return $this->v1->services($sid);
    }
    protected function getTollfreeVerifications() : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\TollfreeVerificationList
    {
        return $this->v1->tollfreeVerifications;
    }
    /**
     * @param string $sid Tollfree Verification Sid
     */
    protected function contextTollfreeVerifications(string $sid) : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\TollfreeVerificationContext
    {
        return $this->v1->tollfreeVerifications($sid);
    }
    protected function getUsecases() : \WP2FA_Vendor\Twilio\Rest\Messaging\V1\UsecaseList
    {
        return $this->v1->usecases;
    }
    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString() : string
    {
        return '[Twilio.Messaging]';
    }
}
